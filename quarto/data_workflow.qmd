---
title: "Data WorkFlow"
author: "Filippo Dall'Olio"
format: 
 html:
    toc: true
    toc-location: left
    df-print: paged
    code-fold: true
    grid:
      sidebar-width: 300px
      body-width: 1400px
      margin-width: 20px
      gutter-width: 1.5rem
editor: visual
editor_options: 
  chunk_output_type: inline
---

# Pakages

First, I load the required packages.

```{r}
#| output: false
devtools::install_github("f-dallolio/adtabler")
1
library(tidyverse, quietly = TRUE)
library(tsibble, quietly = TRUE)
library(rlang, quietly = TRUE)
library(glue, quietly = TRUE)
library(adtabler, quietly = TRUE)
library(furrr)
```

# Data Info

Define the directory containing the AdIntel folders and retrieve data paths.

```{r}
#| output: false
adintel_dir_home <- "/mnt/sata_data_1/adintel"

adintel_folder <- list.files(adintel_dir_home, full.names = TRUE) |>
  stringr::str_replace_all("//", "/")

adintel_all_files_old <- list.files(adintel_dir_home,
  full.names = TRUE,
  recursive = TRUE
)

adintel_all_files_new <- adintel_all_files_old |>
  stringr::str_replace_all(" ", "_") |>
  stringr::str_replace_all("//", "/")
```

```{r}
#| output: false
file.rename(from = adintel_all_files_old, to = adintel_all_files_new) 
```

```{r}
adintel_all_files <- list.files(adintel_dir_home,
  full.names = TRUE,
  recursive = TRUE
)
```

## Info - Dynamic Files

Retrieve file paths for 2020 "dynamic" files (i.e. they can change year by year):

```{r}
adintel_files_dyn <- adintel_all_files |>
  str_subset(pattern = no_case("master_file"), negate = TRUE) |>
  as_tibble_col("full_file_name") |>
  mutate(
    year = as_numeric2(str_split_i(full_file_name, "/", -3)),
    file_type_data = str_split_i(full_file_name, "/", -2),
    file_name_data = str_split_i(full_file_name, "/", -1),
    file_type_std = rename_adintel(file_type_data),
    file_name_std = rename_adintel(str_split_i(file_name_data, "\\.", 1)),
    .before = full_file_name
  ) |>
  arrange(year, file_type_data, file_name_data)
```

## Info - Static Files

Retrieve file paths for "static" files (i.e. they do not change year by year):

```{r}
adintel_files_static <- adintel_all_files |>
  str_subset(pattern = no_case("master_file")) |>
  str_subset(pattern = no_case("Latest")) |>
  str_subset(pattern = as.character(max(adintel_files_dyn$year))) |>
  as_tibble_col("full_file_name") |>
  mutate(
    year = NA,
    file_type_data = "References",
    file_name_data = str_split_i(full_file_name, "/", -1),
    file_type_std = rename_adintel(file_type_data),
    file_name_std = rename_adintel(str_split_i(file_name_data, "\\.", 1)),
    .before = full_file_name
  ) |>
  arrange(file_type_data, file_name_data)
```

# Data Checks

The function takes the full path of a file (`full_file_name`) and returns a data frame/tibble with the the number of columns (`n_cols`), the original column names (`col_name_data`) an their positions (`col_pos`), an the new column names standardized with the function `adtabler::rename_adintel()`.

nested tibble with the name of the file (`file`), the string used (`sep`) to separate columns, the number of rows (`n_rows`), the number of columns (`n_cols`), and the column names (`col_name_man`). I use `_man` at the end of the column indicating the column names in the original files to indicate that it is the name used in the Adintel `_man`ual. The column `col_name_std` contains standardized column names. Standardization is performed by the function `adtabler::rename_adintel()`.

```{r}
fn_col_info <- function(file) {
  
  x <- file
  
  # load the first 100 rows of data
  df <- data.table::fread(
    file = x,
    nrows = 100
  )
  
  # retrieve column names
  col_name_data <- names(df)
  
  # retrieve number of columns
  n_cols <- NCOL(df)
  
  # retrieve the position of columns in the original data
  col_pos <- seq_along(col_name_data)
  
  # standardize column names
  col_name_std <- rename_adintel(col_name_data)
  
  # return a tibble/data frame with:
  #  Number of columns (1), 
  #  original column names (3) and their positions (2),
  # standardized column names.
  tibble(
    n_cols,
    col_pos,
    col_name_data,
    col_name_std
  )
}
```

The data frame `row_numbers` below is a pre-calculated table that contains the number of rows for each file. The number of rows was efficiently computed with the `adtabler::read_nrows()` function.

```{r}
data("row_numbers")

data_info <- adintel_files_dyn |> 
  bind_rows(
    adintel_files_static
  ) |>
  mutate(
    data = full_file_name |> 
      map(
        .f = ~ fn_col_info(.x)
      )
  ) |>
  unnest(
    everything()
  ) |>
  inner_join(
    row_numbers
  ) |>
  select(
    - n_lines_w_header
  ) |>
  relocate(
    n_rows, .before = n_cols
  ) |>
  relocate(
    full_file_name, .after = last_col()
  )
```

```{r}
references_columns
occurrences_columns
lookup_datatype

refer_occurr_info <- occurrences_columns |> 
  nest( unique_key_info = c(media_type_id, col_unique_key) ) |> 
  bind_rows(
    references_columns |> nest(unique_key_info = col_unique_key)
    ) |>
  left_join(
    lookup_datatype
  ) |>
  relocate(
    datatype_r, datatype_sql, .before = sql_length
  ) |>
  nest(
    data_type_info = c(
      datatype_r, datatype_sql, 
      sql_length, sql_scale, 
      datatype_man, datatype_std
    ),
    manual_info = c(col_name_man, description)
  )

data_info <- data_info |>
  nest(
    data_col_original = contains("_data"),
    data_file_info = c(year, n_rows, n_cols, full_file_name)
  ) |>
  left_join( 
    refer_occurr_info
  )
```

```{r}
data_info_unnested <- data_info |> 
  unnest(c(unique_key_info, data_type_info, manual_info)) |> 
  unnest(c(data_col_original, data_file_info))
```

```{r}
rm(list = setdiff(ls(), c("data_info", "data_info_unnested")))
```

```{r}
data_info
data_info_unnested
```

```{r}
file_info <- data_info |> 
  select(file_type_std, file_name_std, data_file_info, data_col_original) |> 
  unnest(everything()) |>
  select(file_type_std,
         file_name_std,
         file_name_data,
         col_name_data,
         year : full_file_name) |> 
  nest(col_name_data = col_name_data) |> 
  mutate(col_name_std = col_name_data |>
           map(~ .x[[1]] |> rename_adintel() |> str_flatten_comma()) |> unlist(),
         col_name_data = col_name_data |> 
           map(~ .x[[1]] |> str_flatten_comma()) |> unlist()) 
```

```{r}
file_info_nested <- file_info |> 
  nest(.by = c(file_type_std, file_name_std),
       .key = "col_info")
```

```{r}
col_info <- data_info |> 
  select(file_type_std : col_name_std, data_type_info) |>
  unnest(everything()) |> 
  select(file_type_std,
         file_name_std,
         col_pos,
         col_name_std,
         datatype_r : datatype_std) |> 
  distinct() 
```

```{r}
col_info_nested <- col_info   |>
  nest(.by = c(file_type_std, file_name_std),
       .key = "col_info")
```

```{r}
manual_info <- data_info |> 
  select(file_type_std, file_name_std, manual_info,data_type_info) |> 
  unnest(everything()) |> 
  select(file_type_std,
       file_name_std,
       c(contains("_man"), description)) |> 
  distinct() |>
  filter(!is.na(col_name_man)) |> 
  mutate(
    col_name_std = rename_adintel(col_name_man), 
    .before = col_name_man
  ) |> 
  inner_join(col_info |> 
               select(file_type_std, file_name_std, col_name_std,datatype_sql, sql_length, sql_scale) |> 
               filter(!if_all(everything(),~ is.na(.x)))) |> 
  relocate(datatype_sql, sql_length, sql_scale, .before = col_name_man) |> 
  relocate(col_name_man, datatype_man, .after = description)
```

```{r}
manual_info_nested <- manual_info |>
  nest(.by = c(file_type_std, file_name_std),
       .key = "manual_info")
```

```{r}
unique_key
```

```{r}
data_info_list <-   list(
    unique_key = unique_key,
    file_info = file_info,
    col_info = col_info,
    manual_info = manual_info
  )
```

```{r}
data_info_list$unique_key
```

```{r}
data_info_list$file_info
```

```{r}
data_info_list$col_info
```

```{r}
data_info_list$manual_info
```

```{r}

# plan(multisession, workers = parallel::detectCores() - 1)
# 
# file_info_start_end <- data_info_list$file_info |> 
#   filter(str_detect(col_name_std, "ad_date"),
#          file_type_std == "occurrences",
#          n_rows != 0) |> 
#   mutate(start_end = map2(year, full_file_name, ~ start_end_date(.x, .y)),
#          .before = 1) |> 
#   mutate(start_end = start_end |> map(str_flatten_comma) |> list_c()) |> 
#   separate_wider_delim(cols = start_end, delim = ", ", names = c("date_start", "date_end"), cols_remove = TRUE)
# 
# usethis::use_data(file_info_start_end, overwrite = TRUE)
# 
# plan(sequential)
# 
# data_info_list$file_info <- data_info_list$file_info |> 
  # filter(n_rows != 0) |> 
  # left_join(file_info_start_end) |> 
  # relocate(date_start, date_end, .after = year)
```

```{r}
# devtools::install_github("f-dallolio/adtabler")
# library(data.table)
# library(tidyverse)
# library(adtabler)

# library(data.table)
# library(dm)
# 
# x <- occurrences_categories |>
#   mutate(media_type_desc_std = rename_adintel(media_type_description)) |>
#   select(file_type_std, file_name_std, media_type_desc_std, media_type_id) |>
#   arrange(file_name_std) |>
#   mutate(file_name_std = file_name_std |>
#            str_replace_all("national_tv", "network_tv") |>
#            str_replace_all("local_tv", "spot_tv")) |>
#   inner_join(
#     data_info_list$file_info |>
#       filter(n_rows > 0) |>
#       select(file_type_std, file_name_std, year, full_file_name, col_name_std) |>
#       nest(.by = c(file_type_std, file_name_std))
#   ) |>
#   unnest(everything()) |>
#   filter(year == 2010)
# 
# x_occs <- x |>
#   mutate(
#     cmd = make_grep_cmd(file = full_file_name, media_type_id = media_type_id, first_n = 1000),
#     .by = media_type_id
#   )
# 
# library(furrr)
# plan(multisession, workers = parallel::detectCores() - 2)
# 
# x_occs$df <- future_map2(
#   .x = x_occs$cmd,
#   .y = x_occs$col_name_std,
#   .f = ~ fread(
#     cmd = .x,
#     header = F,
#     col.names = str_split_comma(.y)
#   ) |>
#     as_tibble(),
#   .progress = T
# )
# 
# plan(sequential)
# 
# names(x_occs$df) <-   glue::glue("id{numpad2(x_occs$media_type_id)}__{x_occs$file_name_std}")
# 
# x_refs <- data_info_list$file_info |>
#   filter(file_type_std == "references",
#          year == 2010 | is.na(year),
#          n_rows > 0) |>
#   mutate(df = full_file_name |> map(~ fread(.x) |>
#                                       as_tibble() |>
#                                       rename_with(rename_adintel, everything()) ) |> 
#            set_names(file_name_std)) 
# 
# occs_refs <- x_occs |>
#   select(file_type_std, file_name_std, media_type_id, media_type_desc_std, df) |> 
#   bind_rows(
#     x_refs |>
#       select(file_type_std, file_name_std, df)
#   ) |>
#   inner_join(data_info_list$unique_key) |>
#   mutate(col_unique_key = map(col_unique_key, str_split_comma))
# 
# names(occs_refs$col_unique_key) <- names(occs_refs$df)
# 
# pcc <- occs_refs$df$product_categories
# adv <- occs_refs$df$advertiser
# brd <- occs_refs$df$brand
# 
# product <- brd |> 
#   left_join(adv) |> 
#   full_join(pcc, by = "product_id") |> 
#   list() |> 
#   set_names("product")
# 
# my_list <- occs_refs |> 
#   filter(! file_name_std %in% c("advertiser", "product_categories", "brand")) |> 
#   pull(df) |> 
#   c(product)
#   
# nms <- occs_refs |> 
#   filter(! file_name_std %in% c("advertiser", "product_categories", "brand")) |> 
#   pull(df) |> 
#   c(product) |> 
#   names()
# 
# my_pk <- occs_refs |> 
#   filter(! file_name_std %in% c("advertiser", "product_categories", "brand")) |> 
#   pull(col_unique_key) |> 
#   c(list(product = "product_id")) 
# 
# my_refs <- my_pk[str_subset(names(my_pk), "id", negate = T)] |> 
#   names() |> 
#   as_tibble_col("refs") |> 
#   mutate(refs_uk = my_pk[str_subset(names(my_pk), "id", negate = T)])
# my_occs <- my_pk[str_subset(names(my_pk), "id")] |> 
#   names() |> 
#   as_tibble_col("occs") |> 
#   mutate(occs_uk = my_pk[str_subset(names(my_pk), "id")])
# 
# my_occs$occs_uk
# 
# eg <- expand_grid(my_occs, my_refs) |> 
#   as_tibble()
# 
# eg$set_diff <- map2(eg$refs_uk, eg$occs_uk, ~ setdiff(.x, .y) |>  length()) |> unlist()
# eg <- eg |> 
#   filter(set_diff == 0)
# 
# fk_table <- tibble(
#   table = names(eg$occs_uk),
#   col = eg$refs_uk,
#   table2 = names(eg$refs_uk)
# )
# 
# 
# for(i in seq_along(nms)){
#   my_list[[i]] <- my_list[[i]] |> 
#     # filter( if_any(my_pk[[i]], ~ is.na(.x))) |> 
#     mutate(id = row_number(), .by = my_pk[[i]]) |> filter(id == 1) |>  select(-id)
# }
# i=1
# for(i in seq_along(fk_table$table)){
#   my_list |> pluck(fk_table$table[2])
# }
# 
# 
# my_dm <- as_dm(my_list)
# 
# for(i in seq_along(nms)){
#   my_dm <- my_dm |> 
#     dm_add_pk(
#       table = !!as.name(nms[[i]]),
#       columns = my_pk[[i]],
#       force = T
#     )
#   print(i)
# }
# 
# for(i in seq_along(fk_table$table)){
#   my_dm <- my_dm |> 
#     dm_add_fk(table = !!as.name(fk_table$table[[i]]),
#               columns = fk_table$col[[i]],
#               ref_table = !!as.name(fk_table$table2[[i]]))
# }
# 
# 
# 
# 
# dm_examine_constraints(my_dm)

```
