---
title: "Data WorkFlow"
author: "Filippo Dall'Olio"
format: 
 html:
    toc: true
    toc-location: left
    df-print: paged
    code-fold: true
    grid:
      sidebar-width: 300px
      body-width: 1400px
      margin-width: 20px
      gutter-width: 1.5rem
editor: visual
editor_options: 
  chunk_output_type: console
---

# Pakages

First, I load the required packages.

```{r}
#| output: false
devtools::install_github("f-dallolio/adtabler", quiet = TRUE)

library(tidyverse, quietly = TRUE)
library(tsibble, quietly = TRUE)
library(rlang, quietly = TRUE)
library(glue, quietly = TRUE)
library(adtabler, quietly = TRUE)
library(furrr)


if( !match("DT", installed.packages()) ) {
  install.packages("DT")
  library("DT")
} else {
  library("DT")
}

```

# Load Data (one year at the time)

Define the directory containing the AdIntel folders and retrieve data paths.

```{r}
adintel_dir_home <- "/mnt/sata_data_1/adintel"

adintel_folder <-list.files(adintel_dir_home, full.names = TRUE) |> 
  stringr::str_replace_all("//","/")

adintel_all_files_old <- list.files(adintel_dir_home, 
                                full.names = TRUE,
                                all.files = TRUE,
                                recursive = TRUE) 

adintel_all_files_new <- adintel_all_files_old |> 
  stringr::str_replace_all(" ", "_") |> 
  stringr::str_replace_all("//", "/")

file.rename(from = adintel_all_files_old, to = adintel_all_files_new)

adintel_all_files <- list.files(adintel_dir_home, 
                                full.names = TRUE,
                                all.files = TRUE,
                                recursive = TRUE) 
```

### Dynamic Files

Retrieve file paths for 2020 "dynamic" files (i.e. they can change year by year):

```{r}
adintel_files_dyn <- adintel_all_files |> 
  str_subset(pattern = no_case("master_file"), negate = TRUE) |> 
  as_tibble_col("full_file_name") |> 
  mutate(
    year = as_numeric2(str_split_i(full_file_name, "/", -3)),
    file_type = str_split_i(full_file_name, "/", -2),
    file_name = str_split_i(full_file_name, "/", -1),
    file_type_std = rename_adintel(file_type),
    file_name_std = rename_adintel( str_split_i(file_name, "\\.", 1) ),
    .before = full_file_name
  ) |> 
  arrange(year, file_type, file_name)
```

### Static Files

Retrieve file paths for "static" files (i.e. they do not change year by year):

```{r}
adintel_files_static <- adintel_all_files |> 
  str_subset(pattern = no_case("master_file")) |> 
  str_subset(pattern = no_case("Latest")) |> 
  str_subset(pattern = as.character(max(adintel_files_dyn$year))) |> 
  as_tibble_col("full_file_name") |> 
  mutate(
    year = NA,
    file_type = "References",
    file_name = str_split_i(full_file_name, "/", -1),
    file_type_std = rename_adintel(file_type),
    file_name_std = rename_adintel( str_split_i(file_name, "\\.", 1) ) ,
    .before = full_file_name
  ) |> 
  arrange(file_type, file_name)
```

### Reunite all files

```{r}
adintel_files <- bind_rows(adintel_files_dyn, adintel_files_static)
```

```{r}
adintel_files |> 
  mutate(across(-full_file_name, as_factor)) |> 
  datatable(rownames = FALSE, filter = "top")
```

Description of each file. The function returns a nested tibble with the name of the file (`file`), the string used (`sep`) to separate columns, the number of rows (`n_rows`), the number of columns (`n_cols`), and the column names (`col_names_man`). I use `"_man` at the end of the column indicating the column names in the original files to indicate that it is the name used in the Adintel `_man`ual. The column `col_names_std` contains standardized column names. Standardization is performed by the function `adtabler::rename_adintel()`.

```{r}
adintel_files |> 
  mutate(file_size_mb = file.size(full_file_name) / 1024^2,
         file_size_mb = round(file_size_mb, 2)) |> 
  mutate(n_rows = read_nrows(full_file_name))
```



<!-- ```{r} -->
<!-- #| output: false -->


<!-- describe_dyn_files <- function(file, header = TRUE){ -->
<!--   num_rows <- read_nrows(file, header) -->
<!--   first_1k_row <- data.table::fread(file = file, -->
<!--                                  skip = as.numeric(!header), -->
<!--                                  nrows = 1000) |> -->
<!--     as.list() |> -->
<!--     unlist(use.names = TRUE) -->

<!--   nms <- names(first_row) -->
<!--   header_nosep <- readLines(file, n = 1, skipNul = TRUE) -->

<!--   sep0 = header_nosep -->
<!--   for(i in seq_along(nms)){ -->
<!--     sep0 <- str_remove_all(sep0, nms[i]) -->
<!--   } -->

<!--   sep = sep0 |> -->
<!--     str_remove_all(" ") |> -->
<!--     str_split("") |> -->
<!--     unlist() |> -->
<!--     unique() -->

<!--   out <- tibble(file, -->
<!--                 sep = sep, -->
<!--                 n_row = num_rows, -->
<!--                 n_col = length(nms), -->
<!--                 col_names_man = list(nms), -->
<!--                 col_names_std = list(adtabler::rename_adintel(nms))) -->
<!--   return(out) -->
<!-- } -->
<!-- # plan(multisession, workers = 30) -->
<!-- # tictoc::tic() -->
<!-- # dyn_files_desc_thread <- future_map(all_dyn_files$full_file_name, describe_dyn_files, .progress = TRUE) -->
<!-- # tictoc::toc() -->
<!-- # plan(sequential) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| output: false -->
<!-- tictoc::tic() -->
<!-- dyn_files_desc <- map(all_dyn_files$full_file_name, describe_dyn_files, .progress = TRUE) |> -->
<!--   list_rbind() -->
<!-- ``` -->

<!-- ```{r} -->
<!-- tictoc::toc() -->
<!-- ``` -->

<!-- ```{r} -->
<!-- dyn_files_desc |> -->
<!--   unnest(everything()) -->
<!-- ``` -->

<!-- Retrieve file paths for different types of data. First check unique file_type names. Here the output is the renamed/standardized names vector of file_type names with the originals as names. -->

<!-- ```{r} -->
<!-- # dyn_files$file_type |> -->
<!-- #   unique() |> -->
<!-- #   rename_adintel() |> -->
<!-- #   set_names(dyn_files$file_type |> unique()) -->
<!-- ``` -->

<!-- ### Occurrences -->

<!-- ```{r} -->

<!-- occurrences_files <- dyn_files |> -->

<!--   filter(str_detect(file_type, no_case("occurrences"))) |> -->

<!--   inner_join(occurrences_columns) |> -->

<!--   nest( -->

<!--     col_pos = col_pos, -->

<!--     col_name_man = col_name_man, -->

<!--     col_class_man = col_class_man, -->

<!--     col_p = col_p, -->

<!--     col_n = col_n, -->

<!--     descripton = description -->

<!--   ) |> -->

<!--   mutate( -->

<!--     col_pos = col_pos |> map(~ .x[[1]]), -->

<!--     col_name_man = col_name_man |> map(~ .x[[1]]), -->

<!--     col_class_man = col_class_man |> map(~ .x[[1]]), -->

<!--     col_p = col_p |> map(~ .x[[1]]), -->

<!--     col_n = col_n |> map(~ .x[[1]]), -->

<!--     descripton = descripton |> map(~ .x[[1]]) -->

<!--   ) -->

<!-- ``` -->

<!-- ```{r} -->

<!-- str(occurrences_files) -->

<!-- ``` -->

<!-- ### References -->

<!-- Retrieve info for dynamic references. -->

<!-- ```{r} -->

<!-- dynamic_references_files <- dyn_files |> -->

<!--   filter(str_detect(file_type, no_case("references"))) |> -->

<!--   mutate( -->

<!--     n_rows = read_nrows(full_file_name), -->

<!--     col_name_man = full_file_name |> -->

<!--       map( -->

<!--         ~ read_header(.x) -->

<!--       ) -->

<!--   ) |> -->

<!--   unnest(everything()) |> -->

<!--   mutate(col_pos = seq_along(col_name_man), .by = file_name, .before = col_name_man) -->

<!-- ``` -->

<!-- Retrieve info for static references. -->

<!-- ```{r} -->

<!-- static_references_files <- adintel_files |> -->

<!--   str_subset(pattern = no_case("master_file")) |> -->

<!--   str_subset(pattern = no_case("latest")) |> -->

<!--   as_tibble_col(column_name = "full_file_name") |> -->

<!--   mutate( -->

<!--     file_size_mb = file.size(full_file_name) / (1024^2), -->

<!--     file_size_mb = file_size_mb |> round(2), -->

<!--     year = NA, -->

<!--     file_type = "References", -->

<!--     file_name = full_file_name |> -->

<!--       str_split_i("/", -1), -->

<!--     file_name_std = file_name |> -->

<!--       str_split_i("\\.", -2) |> -->

<!--       adtabler::rename_adintel(), -->

<!--     n_rows = read_nrows(full_file_name), -->

<!--     col_name_man = full_file_name |> -->

<!--       map( -->

<!--         ~ read_header(.x) -->

<!--       ) -->

<!--   ) |> -->

<!--   unnest(everything()) |> -->

<!--   mutate(col_pos = seq_along(col_name_man), .by = file_name, .before = col_name_man) -->

<!-- ``` -->

<!-- Bind rows of static and dynamic references and merge with "reference_columns" (lookup table with info about all variables in references tables). -->

<!-- ```{r} -->

<!-- references_columns |> print(width = Inf) -->

<!-- ``` -->

<!-- ```{r} -->

<!-- references_files <- references_columns |> -->

<!--   inner_join( -->

<!--     bind_rows(dynamic_references_files, static_references_files) -->

<!--   ) |> -->

<!--   relocate(col_name_man:description, .after = col_pos) |> -->

<!--   relocate(file_name_std, .after = file_name) |> -->

<!--   nest( -->

<!--     col_pos = col_pos, -->

<!--     col_name_man = col_name_man, -->

<!--     col_class_man = col_class_man, -->

<!--     col_p = col_p, -->

<!--     col_n = col_n, -->

<!--     descripton = description -->

<!--   ) |> -->

<!--   mutate( -->

<!--     col_pos = col_pos |> map(~ .x[[1]]), -->

<!--     col_name_man = col_name_man |> map(~ .x[[1]]), -->

<!--     col_class_man = col_class_man |> map(~ .x[[1]]), -->

<!--     col_p = col_p |> map(~ .x[[1]]), -->

<!--     col_n = col_n |> map(~ .x[[1]]), -->

<!--     descripton = descripton |> map(~ .x[[1]]) -->

<!--   ) -->

<!-- references_files -->

<!-- ``` -->

<!-- ### Impressions -->

<!-- ```{r} -->

<!-- impressions_files <- dyn_files |> -->

<!--   filter(str_detect(file_type, no_case("impressions"))) |> -->

<!--   mutate( -->

<!--     n_rows = read_nrows(full_file_name), -->

<!--     col_name_man = full_file_name |> -->

<!--       map( -->

<!--         ~ read_header(.x) -->

<!--       ) -->

<!--   ) |> -->

<!--   unnest(everything()) |> -->

<!--   mutate(col_pos = seq_along(col_name_man), .by = file_name, .before = col_name_man) |> -->

<!--   nest( -->

<!--     col_pos = col_pos, -->

<!--     col_name_man = col_name_man -->

<!--   ) |> -->

<!--   mutate( -->

<!--     col_pos = col_pos |> map(~ .x[[1]]), -->

<!--     col_name_man = col_name_man |> map(~ .x[[1]]) -->

<!--   ) -->

<!-- impressions_files -->

<!-- ``` -->

<!-- ### Market Breaks -->

<!-- ```{r} -->

<!-- market_breaks_files <- dyn_files |> -->

<!--   filter(str_detect(file_type, no_case("market_breaks"))) |> -->

<!--   mutate( -->

<!--     n_rows = read_nrows(full_file_name), -->

<!--     col_name_man = full_file_name |> -->

<!--       map( -->

<!--         ~ read_header(.x) -->

<!--       ) -->

<!--   ) |> -->

<!--   unnest(everything()) |> -->

<!--   mutate(col_pos = seq_along(col_name_man), .by = file_name, .before = col_name_man) |> -->

<!--   nest( -->

<!--     col_pos = col_pos, -->

<!--     col_name_man = col_name_man -->

<!--   ) |> -->

<!--   mutate( -->

<!--     col_pos = col_pos |> map(~ .x[[1]]), -->

<!--     col_name_man = col_name_man |> map(~ .x[[1]]) -->

<!--   ) -->

<!-- market_breaks_files -->

<!-- ``` -->

<!-- ### Universe Estimates -->

<!-- ```{r} -->

<!-- universe_estimates_files <- dyn_files |> -->

<!--   filter(str_detect(file_type, no_case("universe_estimates"))) |> -->

<!--   mutate( -->

<!--     n_rows = read_nrows(full_file_name), -->

<!--     col_name_man = full_file_name |> -->

<!--       map( -->

<!--         ~ read_header(.x) -->

<!--       ) -->

<!--   ) |> -->

<!--   unnest(everything()) |> -->

<!--   mutate(col_pos = seq_along(col_name_man), .by = file_name, .before = col_name_man) |> -->

<!--   nest( -->

<!--     col_pos = col_pos, -->

<!--     col_name_man = col_name_man -->

<!--   ) |> -->

<!--   mutate( -->

<!--     col_pos = col_pos |> map(~ .x[[1]]), -->

<!--     col_name_man = col_name_man |> map(~ .x[[1]]) -->

<!--   ) -->

<!-- universe_estimates_files -->

<!-- ``` -->
